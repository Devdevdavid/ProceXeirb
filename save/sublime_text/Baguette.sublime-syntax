%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - bag
scope: source.example-c

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: numbers
    - include: strings

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(si|sinon|fonction|definition|retourne|fin_si|tant_que|fin_tant_que|entier|reel|evr|rve|.\+.|./.|.=.|.\-.|.\*.|.\<.|.\>.|.\|.|.\^.|.\&.|.==.|.!=.)\b'
      scope: keyword.control.example-c
    - match: '\b(ecrire_a|afficher_LCD|sin|cos|ecrire_mem_part|lire_a)\b'
      scope: entity.name.class.example-c

  numbers:
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.character.escape.example-c


  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.example-c
    - match: '\.'
      scope: constant.character.escape.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '//'
      scope: punctuation.definition.comment.example-c
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.example-c
        - match: $\n?
          pop: true
