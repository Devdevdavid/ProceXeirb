#definition BASE_LED_ADDR (524304)
#definition BASE_VGA (524288)
#definition LAST_VGA_PIXEL (831486)
#definition VGA_WRITE_OK (831488)
#definition SHARED_MEM_START (12288)
#definition SHARED_MEM_END (16383)
#definition CPU_DATA_OK (16383) // This is the end of shared mem
#definition SCREEN_WIDTH (640)
#definition SCREEN_HEIGHT (480)
#definition SCREEN_MASK_TOP (10)
#definition SCREEN_MASK_RIGHT (630)
#definition SCREEN_MASK_BOTTOM (470)
#definition SCREEN_MASK_LEFT (10)

#definition COLOR_WHITE (15)
#definition COLOR_GRAY (7)
#definition COLOR_BLACK (0)

// Used by both (but not equivalent !)
entier isGPU;
entier sync; 
entier sharedHead;

// Used by GPU
entier vgaHead;
entier nbPoints;
entier pointsColor;
entier pointIndex;
entier pointX;
entier pointY;
entier oldPointX;
entier oldPointY;

// Used by CPU
entier nbShapeSummit;

ecrire_a(1, LAST_VGA_PIXEL);
isGPU = lire_a(LAST_VGA_PIXEL);

fonction draw_point(entier color, entier x1, entier y1)
	// Do not show pixel out of mask
	si (x1 < SCREEN_MASK_LEFT)
		color = 0;
	fin_si;
	si (y1 < SCREEN_MASK_TOP)
		color = 0;
	fin_si;
	si (x1 > SCREEN_MASK_RIGHT)
		color = 0;
	fin_si;
	si (y1 > SCREEN_MASK_BOTTOM)
		color = 0;
	fin_si;

	si (color > 0)
		vgaHead = SCREEN_WIDTH * y1;
		vgaHead = vgaHead + x1;
		vgaHead = vgaHead + BASE_VGA;
		ecrire_a(color, vgaHead);
	fin_si;
retourne;

fonction draw_segment(entier color, entier x1, entier y1, entier x2, entier y2)
	entier diagDistance; // Number of points between p1 and p2
	entier xDiff;
	entier yDiff;
	entier index;
	entier yIncrement;
	entier Dx;
	entier Dy;

	si (x1 > x2)
		// Swap p1 and p2 to be able to draw from left to right of the screen
		// Note: We use "index" as temporarly variable to save callstack space
		index = x1;
		x1 = x2;
		x2 = index;
		index = y1;
		y1 = y2;
		y2 = index;
	fin_si
	xDiff = x2 - x1;

	// Compute abs diff
	si (y1 < y2)
		yDiff = y2 - y1;
		yIncrement = 1;
	sinon;
		yDiff = y1 - y2;
		yIncrement = -1;
	fin_si

	// Get MAX
	si (xDiff > yDiff)
		diagDistance = xDiff;
	sinon;
		diagDistance = yDiff;
	fin_si;

	Dy = yDiff - xDiff;
	Dx = xDiff - yDiff;

	index = 0;
	tant_que (index < diagDistance)
		// Draw current point
		draw_point(color, x1, y1);
		//vgaHead = SCREEN_WIDTH * y1;
		//vgaHead = vgaHead + x1;
		//vgaHead = vgaHead + BASE_VGA;
		//ecrire_a(color, vgaHead);

		si (Dx > 0)
			x1 = x1 + 1; // Only x as constant increment because we swaped
			Dx = Dx - yDiff;
		fin_si;
		Dx = Dx + xDiff;

		si (Dy > 0)
			y1 = y1 + yIncrement;
			Dy = Dy - xDiff;
		fin_si;
		Dy = Dy + yDiff;

		index = index + 1;
	fin_tant_que;

retourne;

// This is the GPU part
si (isGPU == 1)

	tant_que(1 == 1)

		// Wait the VGA buffer to be available
	    sync = 1;
	    tant_que(sync > 0)
	      sync = lire_a(VGA_WRITE_OK);
	    fin_tant_que;

	    // Wait CPU Data to be ready
	    sync = 0;
    	tant_que(sync == 0)
	    	sync = lire_a(CPU_DATA_OK); // 0: Data for CPU, 1: Data for GPU
		fin_tant_que;

		// Init
		sharedHead = SHARED_MEM_START;

		nbPoints = lire_a(sharedHead);
		sharedHead = sharedHead + 1;
		tant_que (nbPoints > 0)
			pointsColor = lire_a(sharedHead); // Color
			sharedHead = sharedHead + 1;

			// For each points
			pointIndex = 0;
			tant_que (pointIndex < nbPoints)
				pointX = lire_a(sharedHead); // x_
				sharedHead = sharedHead + 1;
				pointY = lire_a(sharedHead); // y_
				sharedHead = sharedHead + 1;

				// Can't draw segment at first point
				si (pointIndex > 0)
					draw_segment(pointsColor, oldPointX, oldPointY, pointX, pointY);
				fin_si;
				//draw_point(pointsColor, pointX, pointY);

				// Shift data
				oldPointX = pointX;
				oldPointY = pointY;

				pointIndex = pointIndex + 1;
			fin_tant_que;

			// Read for next loop
			nbPoints = lire_a(sharedHead); // NB_SEG
			sharedHead = sharedHead + 1;
		fin_tant_que;

		// Libération des data CPU
		ecrire_a (0, CPU_DATA_OK);

		//ecriture à l'écran
    	ecrire_a (1, VGA_WRITE_OK);
	fin_tant_que;
fin_si; // End of GPU part

// This is the CPU part

entier ledTime;			// Counter for led animation

// value of 16777215 is 16.10 sec
// so 1ms is 16777215 / 16100 = 1042
fonction delay_ms(entier value)
	entier counter;

	counter = 0;
	value = value * 1042;
	tant_que (counter < value)
		counter = counter + 1;
	fin_tant_que;
retourne;

// This make nice animation on the 16 LED
// Symetrical waves 
fonction led_anim_1()
	entier ledAddr;
	entier ledIndex;
	entier ledDeg;
	entier ledIntensity;
	reel ledIntensityFloat;

	// This is the main counter for sinus
	ledTime = ledTime + 1;
	si (ledTime > 360);
		ledTime = ledTime - 360;
	fin_si;

	// The right side is identical ti the left side
	ledIndex = 0;
	tant_que (ledIndex < 8)

		// Generate the counter in degrees
		ledDeg = ledIndex * 50;
		ledDeg = ledDeg + ledTime;
		si (ledDeg > 360);
			ledDeg = ledDeg - 360;
		fin_si;

		// Read the sinus table and aplly an offset to avoid negative value
	    ledIntensity = sin(ledDeg);
	    ledIntensity = ledIntensity + 256;

	    // Convert to real to apply amplitude reduction (Division on integer doesn't work)
	    ledIntensityFloat = evr(ledIntensity);
	    ledIntensityFloat = ledIntensityFloat * 0.3;
	    ledIntensity = rve(ledIntensityFloat);
	    
	    // Write the left side led
	    ledAddr = BASE_LED_ADDR + ledIndex;
	    ecrire_a(ledIntensity, ledAddr);

	    // Write the right side led
	    ledAddr = 15 - ledIndex;
	    ledAddr = ledAddr + BASE_LED_ADDR;
	    ecrire_a(ledIntensity, ledAddr);

	    // Go to next led
	    ledIndex = ledIndex + 1;
	fin_tant_que;
retourne;


entier shapeIndex;
entier summitIndex;
entier tetaDegresCos;
entier tetaDegresSin;
entier x;
entier y;
entier degreeStep;
entier slowDownCnt;
entier pRadius;
entier pMiddleX;
entier pMiddleY;
entier isInExpansion;
entier colorE;
reel colorR;

#definition NB_SHAPES (10)
#definition MIN_RADIUS (1.0)
#definition MAX_RADIUS (210.0)
#definition MIN_MIDDLE_X (320.0)
#definition MAX_MIDDLE_X (640.0)
#definition MIN_MIDDLE_Y (50.0)
#definition MAX_MIDDLE_Y (480.0)

reel rx;
reel ry;
reel radius[NB_SHAPES]; // Radius of all shapes
reel shapeRadius;

nbShapeSummit = 46;

degreeStep = 8; // This is 360 / (nbShapeSummit - 1)

tetaDegresSin = 0;
tetaDegresCos = 90;

// Init radius table for all shapes before animation begin
pRadius = @radius;
shapeRadius = MIN_RADIUS;
shapeIndex = 0;
tant_que (shapeIndex < NB_SHAPES)
	// Write first radius
	ecrire_a(shapeRadius, pRadius);
	pRadius = pRadius + 1;

	// invert value to make the second deacreasing
	shapeRadius = shapeRadius + 18.0;
	shapeRadius = 0.0 - shapeRadius;

	// Write second radius
	ecrire_a(shapeRadius, pRadius);
	pRadius = pRadius + 1;

	// Re-invert and go to next level of radius
	shapeRadius = 0.0 - shapeRadius ;
	shapeRadius = shapeRadius + 22.0;

	shapeIndex = shapeIndex + 2;
fin_tant_que;

tant_que(1 == 1)

	// Wait GPU to be ready
	sync = 1;
	tant_que(sync == 1)
	    sync = lire_a(CPU_DATA_OK); // 0: Data for CPU, 1: Data for GPU
	fin_tant_que;

	led_anim_1();

	// Init
	sharedHead = SHARED_MEM_START;
	pRadius = @radius;

	// Make it turn on itself
	si (slowDownCnt == 1)
		slowDownCnt = 0;
		//tetaDegresSin = tetaDegresSin + 1;
		//tetaDegresCos = tetaDegresCos + 1;
	sinon;
		slowDownCnt = slowDownCnt + 1;
	fin_si;

	shapeIndex = 0;
	tant_que (shapeIndex < NB_SHAPES)
		// Update radius of the shape
		shapeRadius = lire_a(pRadius);
		si (shapeRadius < 0.0)
			isInExpansion = 0;
			shapeRadius = 0.0 - shapeRadius;
			shapeRadius = shapeRadius - 1.0;
			si (shapeRadius < MIN_RADIUS)
				isInExpansion = 1;
			fin_si;
		sinon;
			isInExpansion = 1;
			shapeRadius = shapeRadius + 1.0;
			si (shapeRadius > MAX_RADIUS)
				isInExpansion = 0;
			fin_si;
		fin_si;

		ecrire_a(nbShapeSummit, sharedHead); // NB_POINTS
		sharedHead = sharedHead + 1;

		// Choose the right color
		si (isInExpansion == 0)
			colorR = shapeRadius;
			colorR = colorR * 0.033;
			colorR = colorR + 7.0;
		sinon;
			colorR = MAX_RADIUS - shapeRadius;
			colorR = colorR * 0.033;
			colorR = colorR + 1.0;
		fin_si;
		colorE = rve(colorR);
		ecrire_a(colorE, sharedHead); // Color
		sharedHead = sharedHead + 1;

		summitIndex = 0;
		tant_que (summitIndex < nbShapeSummit)
			// Compute X and Y from the middle
			rx = sin(tetaDegresSin);
			rx = rx * shapeRadius;
			rx = rx + 320.0;
			x = rve(rx);
			si (x > 1024)
				x = 0;
			fin_si;

			ry = sin(tetaDegresCos);
			ry = ry * shapeRadius;
			ry = ry + 240.0;
			y = rve(ry);
			si (y > 1024)
				y = 0;
			fin_si;


			// Write X and Y
			ecrire_a(x, sharedHead); // x_
			sharedHead = sharedHead + 1;
			ecrire_a(y, sharedHead); // y_
			sharedHead = sharedHead + 1;

			// Update teta to go to next summit
			tetaDegresCos = tetaDegresCos + degreeStep;
			si (tetaDegresCos > 360) 
				tetaDegresCos = tetaDegresCos - 360;
			fin_si;
			tetaDegresSin = tetaDegresSin + degreeStep;
			si (tetaDegresSin > 360)
				tetaDegresSin = tetaDegresSin - 360;
			fin_si;

			// Next summit
			summitIndex = summitIndex + 1;
		fin_tant_que; // nbSummit

		si (isInExpansion == 0)
			shapeRadius = 0.0 - shapeRadius;
		fin_si;
		ecrire_a(shapeRadius, pRadius);

		pRadius = pRadius + 1;
		shapeIndex = shapeIndex + 1;
	fin_tant_que; // nbShape

	ecrire_a(0, sharedHead); // NB_POINTS = 0 indicates the end

	// Indicate to the GPU data ready
	ecrire_a (1, CPU_DATA_OK);


fin_tant_que;












