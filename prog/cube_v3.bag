// File: cube.bag (V3)
// Author: David DEVANT
// Date: May 22, 2019
//
#definition BASE_LED_ADDR (524304)
#definition BASE_VGA (524288)
#definition LAST_VGA_PIXEL (831486)
#definition VGA_WRITE_OK (831488)
#definition SHARED_MEM_START (12288)
#definition SHARED_MEM_END (16383)
#definition CPU_DATA_OK (16383) // This is the end of shared mem
#definition SCREEN_WIDTH (640)
#definition SCREEN_HEIGHT (480)
#definition SCREEN_MASK_TOP (10)
#definition SCREEN_MASK_RIGHT (630)
#definition SCREEN_MASK_BOTTOM (470)
#definition SCREEN_MASK_LEFT (10)

#definition COLOR_WHITE (15)
#definition COLOR_GRAY (7)
#definition COLOR_BLACK (0)
#definition COLOR_NONE (-1)

// Used by both (but not equivalent !)
entier isGPU;
entier sync; 
entier sharedHead;
entier nbPoints;

// Used by GPU
entier vgaHead;
entier pointsColor;
entier pointIndex;
entier pointX;
entier pointY;
entier oldPointX;
entier oldPointY;

ecrire_a(1, LAST_VGA_PIXEL);
isGPU = lire_a(LAST_VGA_PIXEL);

//ecrire_a(COLOR_WHITE, LAST_VGA_PIXEL); // Debug

fonction draw_segment(entier color, entier x1, entier y1, entier x2, entier y2)
	entier diagDistance; // Number of points between p1 and p2
	entier xDiff;
	entier yDiff;
	entier index;
	entier yIncrement;
	entier Dx;
	entier Dy;

	si (x1 > x2)
		// Swap p1 and p2 to be able to draw from left to right of the screen
		// Note: We use "index" as temporarly variable to save callstack space
		index = x1;
		x1 = x2;
		x2 = index;
		index = y1;
		y1 = y2;
		y2 = index;
	fin_si
	xDiff = x2 - x1;

	// Compute abs diff
	si (y1 < y2)
		yDiff = y2 - y1;
		yIncrement = 1;
	sinon
		yDiff = y1 - y2;
		yIncrement = -1;
	fin_si

	// Get MAX
	si (xDiff > yDiff)
		diagDistance = xDiff + 1;
	sinon;
		diagDistance = yDiff + 1;
	fin_si;

	Dy = yDiff - xDiff;
	Dx = xDiff - yDiff;

	index = 0;
	tant_que (index < diagDistance)
		// Abort segment if out of mask
		si (x1 < SCREEN_MASK_LEFT)
			index = diagDistance;
		fin_si;
		si (y1 < SCREEN_MASK_TOP)
			index = diagDistance;
		fin_si;
		si (x1 > SCREEN_MASK_RIGHT)
			index = diagDistance;
		fin_si;
		si (y1 > SCREEN_MASK_BOTTOM)
			index = diagDistance;
		fin_si;

		// Draw current point
		vgaHead = SCREEN_WIDTH * y1;
		vgaHead = vgaHead + x1;
		vgaHead = vgaHead + BASE_VGA;
		ecrire_a(color, vgaHead);

		si (Dx > 0)
			x1 = x1 + 1; // Only x as constant increment because we swaped
			Dx = Dx - yDiff;
		fin_si;
		Dx = Dx + xDiff;

		si (Dy > 0)
			y1 = y1 + yIncrement;
			Dy = Dy - xDiff;
		fin_si;
		Dy = Dy + yDiff;

		index = index + 1;
	fin_tant_que;

retourne;

// This is the GPU part
si (isGPU == 1)

	tant_que(1 == 1)

		// Wait the VGA buffer to be available
	    sync = 1;
	    tant_que(sync > 0)
	      sync = lire_a(VGA_WRITE_OK);
	    fin_tant_que;

	    // Wait CPU Data to be ready
	    sync = 0;
    	tant_que(sync == 0)
	    	sync = lire_a(CPU_DATA_OK); // 0: Data for CPU, 1: Data for GPU
		fin_tant_que;

		// Init
		sharedHead = SHARED_MEM_START;

		nbPoints = lire_a(sharedHead);
		sharedHead = sharedHead + 1;
		tant_que (nbPoints > 0)
			pointsColor = lire_a(sharedHead); // Color
			sharedHead = sharedHead + 1;

			// For each points
			pointIndex = 0;
			tant_que (pointIndex < nbPoints)
				pointX = lire_a(sharedHead); // x_
				sharedHead = sharedHead + 1;
				pointY = lire_a(sharedHead); // y_
				sharedHead = sharedHead + 1;

				// Can't draw segment at first point
				si (pointIndex > 0)
					draw_segment(pointsColor, oldPointX, oldPointY, pointX, pointY);
				fin_si;

				// Shift data
				oldPointX = pointX;
				oldPointY = pointY;

				pointIndex = pointIndex + 1;
			fin_tant_que;

			// Read for next loop
			nbPoints = lire_a(sharedHead); // NB_SEG
			sharedHead = sharedHead + 1;
		fin_tant_que;

		// Libération des data CPU
		ecrire_a (0, CPU_DATA_OK);

		//ecriture à l'écran
    	ecrire_a (1, VGA_WRITE_OK);
	fin_tant_que;
fin_si; // End of GPU part

// This is the CPU part

entier ledTime;			// Counter for led animation

// This make nice animation on the 16 LED
// Symetrical waves 
fonction led_anim_1()
	entier ledAddr;
	entier ledIndex;
	entier ledDeg;
	entier ledIntensity;
	reel ledIntensityFloat;

	// This is the main counter for sinus
	ledTime = ledTime + 1;
	si (ledTime > 360);
		ledTime = ledTime - 360;
	fin_si;

	// The right side is identical ti the left side
	ledIndex = 0;
	tant_que (ledIndex < 8)

		// Generate the counter in degrees
		ledDeg = ledIndex * 50;
		ledDeg = ledDeg + ledTime;
		si (ledDeg > 360);
			ledDeg = ledDeg - 360;
		fin_si;

		// Read the sinus table and aplly an offset to avoid negative value
	    ledIntensity = sin(ledDeg);
	    ledIntensity = ledIntensity + 256;

	    // Convert to real to apply amplitude reduction (Division on integer doesn't work)
	    ledIntensityFloat = evr(ledIntensity);
	    ledIntensityFloat = ledIntensityFloat * 0.3;
	    ledIntensity = rve(ledIntensityFloat);
	    
	    // Write the left side led
	    ledAddr = BASE_LED_ADDR + ledIndex;
	    ecrire_a(ledIntensity, ledAddr);

	    // Write the right side led
	    ledAddr = 15 - ledIndex;
	    ledAddr = ledAddr + BASE_LED_ADDR;
	    ecrire_a(ledIntensity, ledAddr);

	    // Go to next led
	    ledIndex = ledIndex + 1;
	fin_tant_que;
retourne;

// Used by CPU
// Summit of the cube
reel som1[3]; // 0: x, 1: y, 2: z
reel som2[3];
reel som3[3];
reel som4[3];
reel som5[3];
reel som6[3];
reel som7[3];
reel som8[3];
som1[0] = 90.; 
som1[1] = 90.;
som1[2] = -90.;

som2[0] = 90.;
som2[1] = 90.;
som2[2] = 90.;

som3[0] = -90.;
som3[1] = 90.;
som3[2] = 90.;

som4[0] = -90.;
som4[1] = 90.;
som4[2] = -90.;

som5[0] = 90.;
som5[1] = -90.;
som5[2] = -90.;

som6[0] = 90.;
som6[1] = -90.;
som6[2] = 90.;

som7[0] = -90.;
som7[1] = -90.;
som7[2] = 90.;

som8[0] = -90.;
som8[1] = -90.;
som8[2] = -90.;

reel x1; 
reel y1;
reel x2; 
reel y2;
reel x3; 
reel y3;
reel x4; 
reel y4;
reel x5; 
reel y5;
reel x6; 
reel y6;
reel x7; 
reel y7;
reel x8; 
reel y8;
reel xx; 
reel xy;
reel yx;
reel yy;
reel zx;
reel zy;
reel temp1;
reel sa; 
reel sb; 
reel sc; 
reel ca; 
reel cb; 
reel cc; 

tant_que(1 == 1)

	led_anim_1();

	// Wait GPU to be ready
	sync = 1;
	tant_que(sync == 1)
	    sync = lire_a(CPU_DATA_OK); // 0: Data for CPU, 1: Data for GPU
	fin_tant_que;

	// Compute position
	a_cos = a_cos + 1;
	a_sin = a_sin + 1;

	tant_que (a_sin > 360)
	a_sin = a_sin - 360;
	fin_tant_que;

	tant_que (a_cos > 270)
	a_cos = a_cos - 360;
	fin_tant_que;

	si (b > 180) 
	b = b - 180;
	fin_si;

	b = 20;
	c = 5;

	sa = sin(a_sin); 
	sb = sin(b); 
	sc = sin(c);
	ca = cos(a_cos);
	cb = cos(b);
	cc = cos(c);

	xx    = cc * ca;    
	temp1 = sc * sa;
	temp1 = temp1 * sb;
	xx    = xx - temp1;

	temp1 = cc * sa; 
	xy    = temp1 * sb;
	temp1 = sc * ca;
	xy    = xy + temp1; 

	temp1 = sa * cc; 
	yx    = 0. - temp1; 
	temp1 = sc * ca;
	temp1 = sc * sb;
	yx    = yx - temp1;

	temp1 = cc * ca; 
	yy    = temp1 * sb;
	temp1 = sc * sa;
	yy    = yy - temp1; 

	zx    = sc * cb;    
	zx    = 0. - zx;

	zy    = cc * cb;    
	zy    = zy * cb;

	x1    = som1[0] * xx; 
	temp1 = som1[1] * yx;
	x1    = x1 + temp1;
	temp1 = som1[2] * zx;
	x1    = x1 + temp1;

	y1    = som1[0] * xy;
	temp1 = som1[1] * yy;
	y1    = y1 + temp1;
	temp1 = som1[2] * zy;
	y1    = y1 + temp1;

	x2    = som2[0] * xx; 
	temp1 = som2[1] * yx;
	x2    = x2 + temp1;
	temp1 = som2[2] * zx;
	x2    = x2 + temp1;

	y2    = som2[0] * xy;
	temp1 = som2[1] * yy;
	y2    = y2 + temp1;
	temp1 = som2[2] * zy;
	y2    = y2 + temp1;

	x3    = som3[0] * xx; 
	temp1 = som3[1] * yx;
	x3    = x3 + temp1;
	temp1 = som3[2] * zx;
	x3    = x3 + temp1;

	y3    = som3[0] * xy;
	temp1 = som3[1] * yy;
	y3    = y3 + temp1;
	temp1 = som3[2] * zy;
	y3    = y3 + temp1;

	x4    = som4[0] * xx; 
	temp1 = som4[1] * yx;
	x4    = x4 + temp1;
	temp1 = som4[2] * zx;
	x4    = x4 + temp1;

	y4    = som4[0] * xy;
	temp1 = som4[1] * yy;
	y4    = y4 + temp1;
	temp1 = som4[2] * zy;
	y4    = y4 + temp1;

	x5    = som5[0] * xx; 
	temp1 = som5[1] * yx;
	x5    = x5 + temp1;
	temp1 = som5[2] * zx;
	x5    = x5 + temp1;

	y5    = som5[0] * xy;
	temp1 = som5[1] * yy;
	y5    = y5 + temp1;
	temp1 = som5[2] * zy;
	y5    = y5 + temp1;

	x6    = som6[0] * xx;
	temp1 = som6[1] * yx;
	x6    = x6 + temp1;
	temp1 = som6[2] * zx;
	x6    = x6 + temp1;

	y6    = som6[0] * xy;
	temp1 = som6[1] * yy;
	y6    = y6 + temp1;
	temp1 = som6[2] * zy;
	y6    = y6 + temp1;

	x7    = som7[0] * xx; 
	temp1 = som7[1] * yx;
	x7    = x7 + temp1;
	temp1 = som7[2] * zx;
	x7    = x7 + temp1;

	y7    = som7[0] * xy;
	temp1 = som7[1] * yy;
	y7    = y7 + temp1;
	temp1 = som7[2] * zy;
	y7    = y7 + temp1;

	x8    = som8[0] * xx; 
	temp1 = som8[1] * yx;
	x8    = x8 + temp1;
	temp1 = som8[2] * zx;
	x8    = x8 + temp1;

	y8    = som8[0] * xy;
	temp1 = som8[1] * yy;
	y8    = y8 + temp1;
	temp1 = som8[2] * zy;
	y8    = y8 + temp1;

	x1 = x1 + CUBE_DECAL_X; 
	y1 = y1 + CUBE_DECAL_Y;
	x2 = x2 + CUBE_DECAL_X;
	y2 = y2 + CUBE_DECAL_Y;
	x3 = x3 + CUBE_DECAL_X;
	y3 = y3 + CUBE_DECAL_Y;
	x4 = x4 + CUBE_DECAL_X;
	y4 = y4 + CUBE_DECAL_Y;
	x5 = x5 + CUBE_DECAL_X;
	y5 = y5 + CUBE_DECAL_Y;
	x6 = x6 + CUBE_DECAL_X;
	y6 = y6 + CUBE_DECAL_Y;
	x7 = x7 + CUBE_DECAL_X;
	y7 = y7 + CUBE_DECAL_Y;
	x8 = x8 + CUBE_DECAL_X;
	y8 = y8 + CUBE_DECAL_Y;


	ecrire_a(0, sharedHead); // NB_POINTS = 0 indicates the end

	// Indicate to the GPU data ready
	ecrire_a (1, CPU_DATA_OK);
fin_tant_que;












